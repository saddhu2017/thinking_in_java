                                           第十二章 通过异常处理错误
Java的基本理念就是“结构不佳的代码不能运行”
12.1 概念
描述了可能产生错误的代码和错误处理代码相分离的一种机制
12.2 基本情形
异常对象也是对象，出现异常要么处理要么交给上级处理
12.3 捕获异常
try块中“尝试”各种方法（可能出现异常）调用，如果有异常发生，catch进行捕获处理
12.4 创建自定义异常
异常类的层次结构
12.5 异常说明
java鼓励人们把方法可能会抛出的异常告知使用此方法的客户端程序员
异常说明通过throws关键字实现
12.6 捕获所有异常
主要是异常链的处理
12.7 java标准异常
RuntimeException是比较重要的异常类
12.8 使用finally进行清理
异常机制中finally字句定会执行
12.9 异常的限制
当覆盖方法时，只能抛出在基类方法的异常说明里列出的那些异常
12.10 构造器
构造器中发生异常时要谨慎处理
12.11 异常匹配
按照类继承结构匹配
12.12 其他可选方法
异常处理系统就像是一个活门，使你能放弃程序的正常执行序列
12.13 异常使用指南
1）在恰当的级别处理问题；
2）解决问题并且重新调用产生异常的方法
3）进行少许修补，然后绕过异常发生的地方继续执行
4）用别的数据进行计算
5）尽量把异常抛到较高层进行处理
12.14 总结
异常最大的优势就是把可能产生错误的代码，与处理错误的代码分离

