                                              第九章 接口
   接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法
   9.1 抽象类和抽象方法
   关键字abstract，拥有抽象方法的类必须声明为抽象类，而抽象类不一定有抽象方法，抽象类的目的就是被继承，通过多态来设计程序
   9.2 接口
   关键字interface和implements
   interface产生一个完全抽象的类，接口提供了方法的完整定义，却没有提供任何实现
   9.3 完全解耦
   主要说明了接口和抽象类的区别，类只有继承才能使用多态，接口只要实现就能形成多态，而且类可以实现多个接口
   同时介绍了“策略设计模式”，创建一个根据所传参数不用而具有不同行为的方法；简单理解就是某个方法需要的参数是某个基类或者接口，通过多态来调用该基类或接口中的方法即多态来达到策略不同的目的
   完全解耦只是说比类更加灵活而已
   9.4java中的多重继承
   接口没有任何实现，也就是说没有任何与接口相关的存储，因此也就无法组织多个接口的组合（不是太明白，得了解java虚拟机中内容才能了解）
   9.5 通过继承来扩展接口
   接口也可以继承接口，包括接口中的常量以及接口中的抽象方法，但是接口相当于多继承如果出现方法名和参数相同而返回值不同的情况则会发生编译时错误
   9.6 适配接口
   在简单的情况下，接口的体现形式通常是一个接收接口类型的方法，而该接口的实现和向该方法传递的对象则取决于方法的使用者
   9.7 接口中的域
   接口中的属性都是常量，必须写出直接量或者由表达式可以计算得到的量
package part9;

interface Fia{
    int i = getI();
    static int getI(){
        return 10;
    }
}
public class Finalinterface implements Fia{
    public static void main(String[] args){
        System.out.println(i);
    }
}
   9.8 嵌套接口
   在类中嵌套接口的语法是相当显而易见的，就像非嵌套接口一样，可以拥有public和“包访问”两种可视性，接口也可以被实现为privat的（相同的语法既试用于嵌套接口，也适用于嵌套类）
   9.9 接口和工厂
   接口是实现多重继承的途径，而生成遵循某个接口的对象的典型方式就是工厂方法模式。（创建对象调用创建方法，在方法内部调用具体的构造器）理论上，通过这种方式，我们的代码将完全与接口实现分离，这就使得我们可以透明地将某个实现替换为另一个实现
   工厂模式，就是提供一个工厂就可以创建出一系列产品即对象，工厂相当于对象的活动空间（更有胜者，可以把工厂模式所返回的对象写在工厂内部，并加private修饰并只通过接口暴漏出来，这样可以实现更好的封装）
   9.10 总结
   在设计程序时，优先选择类而不是接口。从类开始，如果接口的必需性变得非常明确，那么就进行重构。接口是一种重要的工具，但是容易被滥用
